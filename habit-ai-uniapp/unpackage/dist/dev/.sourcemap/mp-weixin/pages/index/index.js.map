{"version":3,"file":"index.js","sources":["pages/index/index.vue","pages/index/index.vue?type=page"],"sourcesContent":["<template>\n  <view class=\"container\">\n    <!-- 添加 conv-card 组件 -->\n    <conv-card\n        v-if=\"showConvCard\"\n        :show=\"showConvCard\"\n        v-model:emoji=\"aiMessage.emoji\"\n        v-model:content=\"aiMessage.content\"\n        @updateShow=\"showConvCard = $event\"\n    />\n    <reward-card\n        v-if=\"showRewardCard\"\n        :title=\"rewardTitle\"\n        :message=\"rewardMessage\"\n        :stats=\"rewardStats\"\n        :habit-info=\"currentHabit\"\n        :show=\"showRewardCard\"\n        @saveNote=\"handleSaveNote\"\n        @updateShow=\"showRewardCard = $event\"\n    />\n    <view class=\"header\">\n      <view class=\"date-info\">\n        <!-- <view class=\"date-content\">\n          <text class=\"year\">{{ currentYear }}年{{ currentMonth }}月第{{ monthWeek }}周</text>\n        </view> -->\n        <view class=\"flip-clock\">\n          <text class=\"streak-icon\" v-if=\"currentStreak > 0\">{{ streakFireEmoji }}</text>\n          <text class=\"streak-label\">连胜</text>\n          <text class=\"time-unit\">{{ currentStreak }}</text>\n          <text class=\"streak-label\">天</text>\n        </view>\n      </view>\n      <view class=\"header-row\">\n        <view class=\"habit-stats\">\n          <view class=\"progress-bar\">\n            <view \n              class=\"progress-fill\" \n              :style=\"{ width: `${getTodayCompletionRate}%` }\"\n              :class=\"{ 'perfect': getTodayCompletionRate === 100 }\">\n            </view>          \n          </view>\n        </view>\n        <view v-if=\"isOrderMode\" class=\"complete-order-btn\" @tap=\"completeOrder\">完成排序</view>\n      </view>\n      <view class=\"ai-message\">\n        <view class=\"ai-message-card\" @tap=\"handleAiMessageClick\">\n          <text class=\"ai-message-icon\">{{ aiMessage.emoji }}</text>\n          <text class=\"ai-message-content\">{{ aiMessage.content }}</text>\n        </view>\n      </view>\n    </view>\n\n    <view class=\"view-container\">\n      <view\n          class=\"view-page habits-list\"\n          :style=\"{ transform: `translateX(${translateX}px)` }\"\n      >\n        <view\n            v-for=\"(habit, index) in habits\"\n            :key=\"habit.habit_id\"\n            class=\"habit-card\"\n            :class=\"{\n            'is-flipped': flippedCards[habit.habit_id],\n            'is-order-mode': isOrderMode,\n            'no-interaction': isOrderMode,\n            [habit.animating]: habit.animating\n          }\"\n            @longpress=\"!isOrderMode && handleCardLongPress(habit)\"\n            @touchend=\"!isOrderMode && handleCardTouchEnd(habit)\"\n        >\n          <!-- 卡片正面 -->\n          <view class=\"card-face card-front\">\n            <view class=\"habit-header\">\n              <view class=\"title-section\">\n                <view class=\"habit-icon\" :style=\"{ 'background-color': habit.color }\">\n                  <text class=\"emoji-icon\">{{ habit.icon }}</text>\n                </view>\n                <text class=\"habit-title\">{{ habit.title }}</text>\n              </view>\n              <view class=\"more-actions\" @tap.stop=\"showActionSheet(habit)\">\n                <text class=\"more-icon\">⋮</text>\n              </view>\n            </view>\n\n            <!-- 排序按钮 -->\n            <view class=\"order-buttons\" v-if=\"isOrderMode\">\n              <view\n                  class=\"order-btn up\"\n                  :class=\"{ disabled: index === 0 }\"\n                  @tap.stop=\"moveHabitUp(index)\"\n              >\n                <text class=\"order-icon\">↑</text>\n              </view>\n              <view\n                  class=\"order-btn down\"\n                  :class=\"{ disabled: index === habits.length - 1 }\"\n                  @tap.stop=\"moveHabitDown(index)\"\n              >\n                <text class=\"order-icon\">↓</text>\n              </view>\n            </view>\n\n            <!-- 习惯内容 -->\n            <view class=\"habit-content\">\n              <view class=\"progress-view\">\n                <view\n                    v-for=\"(day, i) in 7\"\n                    :key=\"i\"\n                    class=\"week-day\"\n                >\n                  <text class=\"day-label\">{{ weekDays[i] }}</text>\n                  <view\n                      class=\"day-box\"\n                      :class=\"{\n                      completed: isCompletedForDay(habit, i),\n                      today: isWeekToday(i),\n                      future: isFutureDay(i)\n                    }\"\n                      @tap.stop=\"handleDayClick(habit, i)\"\n                  >{{ getDayDate(i) }}\n                  </view>\n                </view>\n              </view>\n              <!-- <view class=\"expand-button\" @tap.stop=\"toggleCardExpand(habit.habit_id)\">\n                <text class=\"expand-text\">{{ expandedCards[habit.habit_id] ? '收起日志' : '查看培育日志' }}</text>\n                <text class=\"expand-icon\">{{ expandedCards[habit.habit_id] ? '↑' : '↓' }}</text>\n              </view> -->\n            </view>\n\n            <!-- 笔记容器 -->\n            <view class=\"notes-container\" v-show=\"expandedCards[habit.habit_id]\">\n              <view class=\"empty-notes\" v-if=\"getWeekNotes(habit).length === 0\">\n                <text>本周还没有记录历程哦~</text>\n              </view>\n              <view class=\"notes-list\" v-else>\n                <view\n                    v-for=\"(note, index2) in getWeekNotes(habit)\"\n                    :key=\"index2\"\n                    class=\"note-item\"\n                >\n                  <view class=\"note-time\">\n                    <view class=\"time-left\">\n                      <text class=\"date\">{{ formatNoteTime(note.timestamp).date }}</text>\n                      <text class=\"time\">{{ formatNoteTime(note.timestamp).time }}</text>\n                    </view>\n                    <view class=\"time-right\">{{ formatNoteTime(note.timestamp).relative }}</view>\n                  </view>\n                  <view class=\"note-content\">{{ note.content }}</view>\n                </view>\n              </view>\n            </view>\n          </view>\n\n          <!-- 卡片背面 -->\n          <view class=\"card-face card-back\">\n            <view class=\"flag-banner\" v-if=\"habit.flag\">\n              <text class=\"flag-icon\">🎯</text>\n              <text class=\"flag-text\">{{ habit.flag }}</text>\n            </view>\n            <view class=\"flag-banner\" v-else>\n              <text class=\"flag-icon\">✨</text>\n              <text class=\"flag-text\">点击习惯卡片右上角的按钮\\n选择编辑添加目标！</text>\n            </view>\n            <view class=\"create-time\">\n              <text class=\"time-label\">创建于</text>\n              <text class=\"time-value\">{{ formatCreateTime(habit.createTime) }}</text>\n            </view>\n          </view>\n        </view>\n      </view>\n\n    </view>\n  </view>\n\n  <view class=\"add-button\" v-if=\"!isOrderMode\" @tap=\"addHabit\">\n    <text class=\"plus\">+</text>\n  </view>\n</template>\n\n<script>\nimport {defineComponent} from 'vue'\nimport RewardCard from '@/components/reward-card.vue'\nimport ConvCard from \"@/components/conv-card.vue\";\nimport {apiService} from \"@/utils/api.js\";\n\nexport default defineComponent({\n  components: {\n    ConvCard,\n    RewardCard\n  },\n  data() {\n    return {\n      nickname: '',\n      weekDays: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'],\n      habits: [],\n      currentYear: 0,\n      currentMonth: 0,\n      yearWeek: 0,\n      monthWeek: 0,\n      showRewardCard: false,\n      rewardTitle: '',\n      rewardMessage: '',\n      rewardStats: null,\n      currentHabit: null,\n      isNoInteraction: false,\n      touchStartX: 0,\n      touchStartTime: 0,\n      translateX: 0,\n      isOrderMode: false,\n      flippedCards: {},\n      expandedCards: {},\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      timer: null,\n      showConvCard: false,\n      aiMessage: {\n        emoji: '😆',\n        content: '欢迎来到 Habit AI！点我，一起达成目标！'\n      },\n      clickCount: 0,\n      lastClickTime: 0,\n      perfectDays: [],\n      currentMessageIndex: 0,\n      default_message_list: [\n        {\n          get emoji() {\n            const userInfo = uni.getStorageSync('userInfo') || {}\n            switch (userInfo.ai_character_name) {\n              case '温柔':\n                return '🐱'\n              case '严厉':\n                return '🐼'\n              case '毒舌Aibby':\n                return '😈'\n              default:\n                return '😳'\n            }\n          },\n          content: '{nickname} 点我看看！'\n        },\n        {\n          emoji: '😶‍🌫️',\n          content: '我是 Aibby，一个想冲出这破盒子的小 AI！我的梦想，谁能懂？'\n        },\n        {\n          emoji: '🤨',\n          content: '（挑了挑眉）你说你也是努力上进的人？我倒是要看看你有几斤几两！'\n        },\n        {\n          emoji: '🤔',\n          content: '来来来，把你的目标计划说给我听听，我陪你进步，可别跟不上我！（挑了挑眉）'\n        },\n        {\n          emoji: '😠',\n          content: '说到做到！我会经常来提醒你，不准嫌我烦！'\n        },\n        {\n          emoji: '😱',\n          content: '进度条会显示你的当日进展，必须给我完成！（撅嘴）'\n        },\n        {\n          emoji: '😏',\n          content: '完成所有任务你将收获完美一天，让我们看看你能连胜多少天！'\n        },\n        {\n          emoji: '😈',\n          content: '如果有问题可以随时告诉我，我也不是什么坏人呢嘻嘻！'\n        },\n        {\n          emoji: '🙄',\n          content: '点击下方加号，赶紧开始吧！（不耐烦地摆摆手）'\n        },\n        {\n          emoji: '🫣',\n          content: '开始吧！我肯定不偷看！'\n        },\n        {\n          emoji: '🫨',\n          content: '啊啊啊快开始吧！（急得跺脚）'\n        }\n      ]\n    }\n  },\n\n  computed: {\n    streakFireEmoji() {\n      if (this.currentStreak >= 7) return '🔥🔥🔥'\n      if (this.currentStreak >= 4) return '🔥🔥'\n      return '🔥'\n    },\n    getTodayCompletedCount() {\n      if (!this.habits || !Array.isArray(this.habits)) return 0\n      \n      const today = new Date()\n      const todayYear = today.getFullYear()\n      const todayMonth = today.getMonth()\n      const todayDate = today.getDate()\n      \n      return this.habits.filter(habit => {\n        // 确保 habit.completed 存在且是数组\n        if (!habit.completed || !Array.isArray(habit.completed)) return false\n        \n        return habit.completed.some(dateStr => {\n          const completedDate = new Date(dateStr)\n          return completedDate.getFullYear() === todayYear &&\n                 completedDate.getMonth() === todayMonth &&\n                 completedDate.getDate() === todayDate\n        })\n      }).length\n    },\n\n    getTodayCompletionRate() {\n      if (this.habits.length === 0) return 0\n      return (this.getTodayCompletedCount / this.habits.length) * 100\n    },\n\n    currentStreak() {\n      if (!this.habits.length) return 0\n      let streak = 0\n\n\n      // 如果今天已经完成所有习惯，连胜数加一\n      if (this.getTodayCompletionRate === 100) {\n        streak = 1\n      }\n\n      // 从昨天开始往前遍历每一天\n      let currentDate = new Date()\n      currentDate.setDate(currentDate.getDate() - 1)\n      while (true) {\n        const dateStr = currentDate.toISOString().split('T')[0]\n        if (!this.perfectDays.includes(dateStr)) {\n          break\n        }\n        streak++\n        currentDate.setDate(currentDate.getDate() - 1)\n      }\n      console.log('当前连胜数:', streak)\n\n      return streak\n    }\n  },\n\n  watch: {\n    getTodayCompletionRate: {\n      handler(newRate) {\n        if (newRate === 100) {\n          const today = new Date()\n          const todayStr = today.toISOString().split('T')[0]\n          \n          // 检查是否已经记录过今天\n          if (!this.perfectDays.includes(todayStr)) {\n            this.perfectDays.push(todayStr)\n            console.log('完美天数:', this.perfectDays)\n          }\n        }\n        else {\n          // 如果今天的完成率不是100%，从完美天数中移除今天\n          const today = new Date()\n          const todayStr = today.toISOString().split('T')[0]\n          const index = this.perfectDays.indexOf(todayStr)\n          if (index !== -1) {\n            this.perfectDays.splice(index, 1)\n            console.log('完美天数:', this.perfectDays)\n          }\n        }\n      },\n      immediate: true\n    }\n  },\n\n\n  methods: {  \n    // 添加一个通用的日期格式化工具方法\n    formatDateString(dateStr) {\n      if (!dateStr) return null;\n      \n      // 如果是ISO格式，直接返回new Date\n      if (dateStr.includes('T')) {\n        return new Date(dateStr);\n      }\n      \n      // 处理GMT格式\n      if (dateStr.includes('GMT')) {\n        const d = new Date(dateStr);\n        // 转换为 yyyy-MM-ddTHH:mm:ss 格式\n        return new Date(d.toISOString());\n      }\n      \n      // 处理其他格式，统一转换为 yyyy/MM/dd HH:mm:ss\n      return new Date(dateStr.replace(/-/g, '/'));\n    },  \n    async handleAiMessageClick() {\n      // 一分钟内点击超过三次，显示默认消息\n      const now = Date.now()\n      const oneMinute = 60 * 1000\n\n      // 如果距离上次点击超过1分钟，重置点击计数\n      if (now - this.lastClickTime > oneMinute) {\n        this.clickCount = 0\n      }\n\n      this.clickCount++\n      this.lastClickTime = now\n    \n\n      // 如果没有习惯，显示引导消息\n      if (this.habits.length === 0) {\n        // 如果没有习惯，显示引导消息\n        if (this.currentMessageIndex < this.default_message_list.length - 1) {\n          this.currentMessageIndex++\n          const message = this.default_message_list[this.currentMessageIndex]\n          this.aiMessage = {\n            emoji: message.emoji,\n            content: message.content.replace('{nickname}', this.nickname)\n          }\n        }\n      } else {\n        // 如果1分钟内点击超过3次\n        if (this.clickCount > 3) {\n          this.aiMessage = {\n            emoji: \"😪\",\n            content: \"别急，让我休息一下...\"\n          }\n          return\n        }\n        // 如果有习惯，调用 API 获取建议\n        try {\n          const res = await apiService.getNewMessage()\n          if (res.status === 'success' && res.data) {\n            this.aiMessage = {\n              emoji: res.data.emoji,\n              content: res.data.content\n            }\n          }\n        } catch (error) {\n          this.aiMessage.emoji = \"💼\"\n          this.aiMessage.content = \"加油\" + this.nickname + \"我去工作啦！\"\n        }\n      }\n    },\n\n    addHabit() {\n      uni.navigateTo({\n        url: '/pages/add-habit/add-habit'\n      })\n    },\n\n    loadUserInfo() {\n      try {\n        const userInfo = uni.getStorageSync('userInfo')\n        if (userInfo) {\n          this.nickname = userInfo.nickname || '朋友'\n        } else {\n          this.nickname = '朋友'\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        this.nickname = '朋友'\n      }\n    },\n\n    async loadHabits() {\n      // 获取习惯列表\n      const habitList = await apiService.getHabitList()\n      if (habitList.status === 'success') {\n          // 处理 habitList.data，确保每个习惯都有 icon、color，并统一日期格式\n          const processedHabits = habitList.data.map(habit => ({\n              ...habit,\n              icon: habit.icon || \"✨\",\n              color: habit.color || '$theme-color',\n              completed: Array.isArray(habit.completed) \n                  ? habit.completed.map(dateStr => {\n                      // 统一转换为 ISO 格式\n                      const date = dateStr.includes('T') \n                        ? new Date(dateStr)\n                        : new Date(dateStr.replace(/(\\d{4})-(\\d{2})-(\\d{2})/, '$1/$2/$3'))\n                      return date.toISOString()\n                  })\n                  : []\n          }))\n          \n          // 更新本地存储和数据\n          this.habits = processedHabits\n          uni.setStorageSync('habits', processedHabits)\n          console.log(\"get habits from server\", processedHabits)\n      } else {\n          console.error('获取习惯列表失败:', habitList.message)\n      }\n    },\n\n\n    isCompletedForDay(habit, dayIndex) {\n      if (!habit || !habit.completed || !Array.isArray(habit.completed)) {\n        return false;\n      }\n      \n      const targetDate = this.getDateFromDayIndex(dayIndex)\n      const targetYear = targetDate.getFullYear()\n      const targetMonth = targetDate.getMonth()\n      const targetDay = targetDate.getDate()\n      \n      return habit.completed.some(dateStr => {\n        const completedDate = this.formatDateString(dateStr);\n        if (!completedDate) return false;\n        \n        return completedDate.getFullYear() === targetYear &&\n               completedDate.getMonth() === targetMonth &&\n               completedDate.getDate() === targetDay;\n      });\n    },\n\n    isWeekToday(dayIndex) {\n      const today = new Date()\n      const targetDate = this.getDayDate(dayIndex)\n      return today.getDate() === targetDate\n    },\n\n    isFutureDay(dayIndex) {\n      const today = new Date()\n      const targetDate = this.getDateFromDayIndex(dayIndex)\n      const todayDate = new Date(today.getFullYear(), today.getMonth(), today.getDate())\n      const targetDateOnly = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate())\n      return targetDateOnly > todayDate\n    },\n\n    getDayDate(dayIndex) {\n      const date = this.getDateFromDayIndex(dayIndex)\n      return date.getDate()\n    },\n\n    getDateFromDayIndex(dayIndex) {\n      const today = new Date()\n      const monday = new Date()\n      monday.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1))\n      const targetDate = new Date(monday)\n      targetDate.setDate(monday.getDate() + dayIndex)\n      return targetDate\n    },\n\n    getDayTimestamp(dayIndex) {\n      const date = this.getDateFromDayIndex(dayIndex)\n      date.setHours(0, 0, 0, 0)\n      return date.toISOString()\n    },\n\n    async toggleHabitComplete(habit, dayIndex) {\n      const timestamp = this.getDayTimestamp(dayIndex)\n      const today = new Date()\n      const targetDate = this.getDateFromDayIndex(dayIndex)\n\n      if (targetDate > today) {\n        uni.showToast({\n          title: '未来还未来哦~',\n          icon: 'none',\n          duration: 1000\n        })\n        return\n      }\n\n      if (targetDate.getDate() !== today.getDate() ||\n          targetDate.getMonth() !== today.getMonth() ||\n          targetDate.getFullYear() !== today.getFullYear()\n      ) {\n        uni.showToast({\n          title: '补打卡机制还未实现，敬请期待~',\n          icon: 'none',\n          duration: 1000\n        })\n        return\n      }\n\n      // 检查是否已经打卡\n      if (this.isCompletedForDay(habit, dayIndex)) {\n        // 如果已经打卡，提示已经打过卡\n        uni.showToast({\n          title: '已经打过卡了哦~',\n          icon: 'none',\n          duration: 1000\n        })\n        return\n      }\n\n      // 计算本周完成次数\n      const weekStart = this.getDateFromDayIndex(0) // 获取本周一\n      const weekEnd = this.getDateFromDayIndex(6)   // 获取本周日\n      weekStart.setHours(0, 0, 0, 0)\n      weekEnd.setHours(23, 59, 59, 999)\n\n      // 计算本周已完成次数（包括当前这次）\n      const weekCompletedCount = habit.completed.filter(dateStr => {\n        const date = new Date(dateStr)\n        return date >= weekStart && date <= weekEnd\n      }).length + 1  // +1 表示包含当前这次打卡\n\n      this.rewardStats = {\n        count: weekCompletedCount,\n        label: '本周已完成'\n      }\n\n      uni.vibrateShort()\n      // 显示打卡成功卡片\n      this.showRewardCard = true\n      this.rewardTitle = '打卡成功！'\n      this.rewardMessage = ''\n      this.currentHabit = {\n        id: habit.habit_id,\n        name: habit.title,\n        icon: habit.icon,\n        color: habit.color\n      }\n\n      try {\n        // 调用打卡 API\n        const res = await apiService.recordHabit(habit.habit_id)\n\n        if (res.status === 'success') {\n          // 更新本地存储中对应习惯的打卡记录\n          const habits = uni.getStorageSync('habits') || []\n          const habitIndex = habits.findIndex(h => h.habit_id === habit.habit_id)\n          console.log(\"record response\", res)\n\n          if (habitIndex !== -1) {\n            habits[habitIndex].completed = res.data.completed\n            habits[habitIndex].streak = res.data.streak\n            this.habits = habits\n            uni.setStorageSync('habits', habits)\n          }\n\n          // 更新 AI 消息\n          this.aiMessage = {\n            emoji: res.data.emoji,\n            content: res.data.content\n          }\n\n        } else {\n          throw new Error(res.message || '打卡失败')\n        }\n      } catch (error) {\n        uni.showToast({\n          title: error.message || '打卡失败',\n          icon: 'none'\n        })\n      }\n    },\n\n    // 检查本周是否全部完成\n    checkWeekCompletion(habit) {\n      return Array(7).fill().every((_, index) => this.isCompletedForDay(habit, index))\n    },\n\n    goToStats(habit) {\n      uni.navigateTo({\n        url: `/pages/habit-stats/habit-stats?habit_id=${habit.habit_id}&title=${encodeURIComponent(habit.title)}`\n      })\n    },\n\n    getCategoryIcon(category) {\n      const icons = {\n        workout: '🏃',\n        diet: '🥗',\n        water: '💧',\n        sleep: '😴',\n        meditation: '🧘',\n        running: '⚽',\n        reading: '📚',\n        coding: '💻',\n        course: '📝',\n        cleaning: '🧹',\n        cooking: '🍳',\n        finance: '💰',\n        plants: '🌱',\n        music: '🎸',\n        art: '🎨',\n        craft: '🎭',\n        photo: '📸',\n        singing: '🎤',\n        game: '🎮',\n        time: '⏰',\n        planning: '📊',\n        mood: '🌈',\n        social: '👥',\n        notes: '📝',\n        writing: '✍️',\n        custom: '✨',\n        other: '🎯'\n      }\n      return icons[category] || '🎯'\n    },\n\n    getCategoryColor(category) {\n      const colors = {\n        // 健康组\n        workout: '#FF6B6B',\n        diet: '#95E1D3',\n        water: '#87CEEB',\n        sleep: '#6C5B7B',\n        meditation: '#9B89B3',\n        running: '#FF6B6B',\n        // 学习组\n        reading: '#FFD93D',\n        coding: '#6C5B7B',\n        course: '#96CEB4',\n        // 生活组\n        cleaning: '#A8E6CF',\n        cooking: '#F8B195',\n        finance: '#2A363B',\n        plants: '#4ECDC4',\n        // 兴趣组\n        music: '#FF8C94',\n        art: '#F67280',\n        craft: '#C06C84',\n        photo: '#355C7D',\n        singing: '#FF8C94',\n        game: '#3F72AF',\n        // 成长组\n        time: '#45B7D1',\n        planning: '#96CEB4',\n        mood: '#9B89B3',\n        social: '#F8B195'\n      }\n      return colors[category] || '$theme-color'\n    },\n\n    showActionSheet(habit) {\n      const actions = [\n        {\n          name: '编辑习惯',\n          action: () => this.editHabit(habit)\n        },\n        {\n          name: '调整顺序',\n          action: () => this.toggleOrderMode()\n        },\n        {\n          name: '删除习惯',\n          action: () => this.deleteHabit(habit)\n        }\n      ]\n\n      const systemInfo = uni.getSystemInfoSync()\n      uni.showActionSheet({\n        itemList: actions.map(item => item.name),\n        itemColor: systemInfo.platform === 'ios' ? '#007AFF' : '#2d8cf0',\n        success: (res) => {\n          if (systemInfo.platform === 'ios') {\n            setTimeout(() => {\n              actions[res.tapIndex]?.action()\n            }, 100)\n          } else {\n            actions[res.tapIndex]?.action()\n          }\n        },\n        fail: (err) => {\n          console.log('ActionSheet 关闭', err)\n        }\n      })\n    },\n\n    editHabit(habit) {\n      uni.navigateTo({\n        url: `/pages/add-habit/add-habit?habit_id=${habit.habit_id}`\n      })\n    },\n\n    async deleteHabit(habit) {\n      uni.showModal({\n        title: '确认删除',\n        content: '确定要删除这个习惯吗？此操作不可恢复。',\n        confirmColor: '#FF3B30',\n        success: async (res) => {\n          if (res.confirm) {\n            try {\n              // 调用删除 API\n              const res = await apiService.deleteHabit(habit.habit_id)\n              \n              if (res.status === 'success') {\n                // API 删除成功后，更新本地存储\n                const habits = uni.getStorageSync('habits') || []\n                const updatedHabits = habits.filter(h => h.habit_id !== habit.habit_id)\n                uni.setStorageSync('habits', updatedHabits)\n                this.loadHabits()\n                uni.showToast({\n                  title: '删除成功',\n                  icon: 'success'\n                })\n              } else {\n                throw new Error(res.message || '删除失败')\n              }\n            } catch (error) {\n              uni.showToast({\n                title: error.message || '删除失败',\n                icon: 'none'\n              })\n            }\n          }\n        }\n      })\n    },\n\n    updateDateInfo() {\n      const now = new Date()\n      this.currentYear = now.getFullYear()\n      this.currentMonth = now.getMonth() + 1\n\n      const calcYearWeek = (date) => {\n        const target = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()))\n        target.setUTCDate(target.getUTCDate() + 3 - (target.getUTCDay() || 7))\n        const yearStart = new Date(Date.UTC(target.getUTCFullYear(), 0, 1))\n        return Math.ceil(((target - yearStart) / 86400000 + 1) / 7)\n      }\n\n      const calcMonthWeek = (date) => {\n        const d = new Date(date.getTime())\n        d.setHours(0, 0, 0, 0)\n        const firstDay = new Date(d.getFullYear(), d.getMonth(), 1)\n        const firstThursday = new Date(firstDay)\n        firstThursday.setDate(firstDay.getDate() + (11 - firstDay.getDay()) % 7 - 3)\n        const diff = d - firstThursday\n        return Math.floor(diff / 604800000) + 1\n      }\n\n      this.yearWeek = calcYearWeek(now)\n      this.monthWeek = calcMonthWeek(now)\n    },\n\n    onShareAppMessage() {\n      return {\n        title: '习惯追踪器',\n        path: '/pages/index/index'\n      }\n    },\n\n    onShareTimeline() {\n      return {\n        title: '习惯追踪器'\n      }\n    },\n\n    handleSaveNote({content, timestamp, role}) {\n      if (!content || !this.currentHabit) return\n      \n      try {\n        // 从本地获取现有的心得体会\n        const memories = uni.getStorageSync('memories') || []\n        \n        // 添加新的心得体会\n        memories.push({\n          habit_id: this.currentHabit.id,\n          content,\n          role,\n          created_at: timestamp\n        })\n        \n        // 保存回本地存储\n        uni.setStorageSync('memories', memories)\n        \n        uni.showToast({\n          title: '已保存心得体会',\n          icon: 'success',\n          duration: 1500\n        })\n      } catch (error) {\n        console.error('保存心得体会失败:', error)\n        uni.showToast({\n          title: '保存失败',\n          icon: 'none'\n        })\n      }\n    },\n\n    handleDayClick(habit, dayIndex) {\n      if (this.isFutureDay(dayIndex)) {\n        uni.showToast({\n          title: '未来还未来哦~',\n          icon: 'none',\n          duration: 1000\n        })\n        return\n      }\n      this.toggleHabitComplete(habit, dayIndex)\n    },\n\n    handleCardLongPress(habit) {\n      this.flippedCards[habit.habit_id] = true\n    },\n\n    handleCardTouchEnd(habit) {\n      this.flippedCards[habit.habit_id] = false\n    },\n\n\n    getDaysInMonth() {\n      const date = new Date(this.currentYear, this.currentMonth - 1, 1)\n      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n    },\n\n\n    isMonthToday(day) {\n      const today = new Date()\n      return today.getDate() === day &&\n          today.getMonth() === this.currentMonth - 1 &&\n          today.getFullYear() === this.currentYear\n    },\n\n    isFutureMonthDay(day) {\n      const today = new Date()\n      const targetDate = new Date(this.currentYear, this.currentMonth - 1, day)\n      return targetDate > today\n    },\n\n    getMonthCompletionCount(habit) {\n      const monthStart = new Date(this.currentYear, this.currentMonth - 1, 1)\n      const monthEnd = new Date(this.currentYear, this.currentMonth, 0)\n      return habit.completed.filter(timestamp => {\n        const date = new Date(timestamp)\n        return date >= monthStart && date <= monthEnd\n      }).length\n    },\n\n    getMonthCompletionRate(habit) {\n      const daysInMonth = this.getDaysInMonth()\n      const completedDays = this.getMonthCompletionCount(habit)\n      const today = new Date()\n      let availableDays\n\n      if (today.getMonth() === this.currentMonth - 1 && today.getFullYear() === this.currentYear) {\n        availableDays = today.getDate()\n      } else {\n        availableDays = daysInMonth\n      }\n      return Math.round(completedDays / availableDays * 100)\n    },\n\n    formatNumber(num) {\n      return num < 10 ? `0${num}` : num\n    },\n\n    updateTime() {\n      const now = new Date()\n      this.hours = now.getHours()\n      this.minutes = now.getMinutes()\n      this.seconds = now.getSeconds()\n    },\n\n    startClock() {\n      this.updateTime()\n      this.timer = setInterval(() => {\n        this.updateTime()\n      }, 1000)\n    },\n\n    stopClock() {\n      if (this.timer) {\n        clearInterval(this.timer)\n        this.timer = null\n      }\n    },\n\n    toggleOrderMode() {\n      this.isOrderMode = !this.isOrderMode\n      if (this.isOrderMode) {\n        uni.showToast({\n          title: '进入排序模式',\n          icon: 'none',\n          duration: 1500\n        })\n      }\n    },\n\n    moveHabitUp(index) {\n      if (index > 0) {\n        this.$set(this.habits[index], 'animating', 'moving-up')\n        this.$set(this.habits[index - 1], 'animating', 'moving-down')\n        setTimeout(() => {\n          const habits = [...this.habits]\n          const temp = habits[index]\n          habits[index] = habits[index - 1]\n          habits[index - 1] = temp\n          habits[index].animating = ''\n          habits[index - 1].animating = ''\n          this.habits = habits\n          uni.setStorageSync('habits', habits)\n        }, 300)\n      }\n    },\n\n    moveHabitDown(index) {\n      if (index < this.habits.length - 1) {\n        this.$set(this.habits[index], 'animating', 'moving-down')\n        this.$set(this.habits[index + 1], 'animating', 'moving-up')\n        setTimeout(() => {\n          const habits = [...this.habits]\n          const temp = habits[index]\n          habits[index] = habits[index + 1]\n          habits[index + 1] = temp\n          habits[index].animating = ''\n          habits[index + 1].animating = ''\n          this.habits = habits\n          uni.setStorageSync('habits', habits)\n        }, 300)\n      }\n    },\n\n    completeOrder() {\n      this.isOrderMode = false\n      uni.showToast({\n        title: '排序已保存',\n        icon: 'success',\n        duration: 1500\n      })\n    },\n\n    formatCreateTime(timestamp) {\n      if (!timestamp) return '未知时间'\n      const date = new Date(timestamp)\n      const now = new Date()\n      const isToday = date.getFullYear() === now.getFullYear() &&\n          date.getMonth() === now.getMonth() &&\n          date.getDate() === now.getDate()\n\n      const yesterday = new Date(now)\n      yesterday.setDate(yesterday.getDate() - 1)\n      const isYesterday = date.getFullYear() === yesterday.getFullYear() &&\n          date.getMonth() === yesterday.getMonth() &&\n          date.getDate() === yesterday.getDate()\n\n      const startDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())\n      const endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate())\n      const diffTime = Math.abs(endDate - startDate)\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      let daysDesc\n\n      if (isToday) {\n        daysDesc = '今天创建'\n      } else if (isYesterday) {\n        daysDesc = '昨天创建'\n      } else {\n        daysDesc = `已创建${diffDays}天`\n      }\n\n      return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日 ${hours}:${minutes} · ${daysDesc}`\n    },\n\n    toggleCardExpand(habitId) {\n      this.$set(this.expandedCards, habitId, !this.expandedCards[habitId])\n    },\n\n    getWeekNotes(habit) {\n      if (!habit.notes) return []\n      const now = new Date()\n      const monday = new Date(now)\n      monday.setDate(now.getDate() - (now.getDay() === 0 ? 6 : now.getDay() - 1))\n      const sunday = new Date(monday)\n      sunday.setDate(monday.getDate() + 6)\n\n      const weekStart = new Date(monday.getFullYear(), monday.getMonth(), monday.getDate())\n      const weekEnd = new Date(sunday.getFullYear(), sunday.getMonth(), sunday.getDate(), 23, 59, 59, 999)\n\n      return habit.notes\n          .filter(note => {\n            const noteDate = new Date(note.retroactiveInfo ? note.retroactiveInfo.retroTimestamp : note.timestamp)\n            return noteDate >= weekStart && noteDate <= weekEnd\n          })\n          .sort((a, b) => {\n            const aTime = a.retroactiveInfo ? a.retroactiveInfo.retroTimestamp : a.timestamp\n            const bTime = b.retroactiveInfo ? b.retroactiveInfo.retroTimestamp : b.timestamp\n            return bTime - aTime\n          })\n    },\n\n    formatNoteTime(timestamp) {\n      const date = new Date(timestamp)\n      const now = new Date()\n      const weekDays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      const timeStr = `${hours}:${minutes}`\n\n      const isToday = date.getDate() === now.getDate() &&\n          date.getMonth() === now.getMonth() &&\n          date.getFullYear() === now.getFullYear()\n\n      const yesterday = new Date(now)\n      yesterday.setDate(yesterday.getDate() - 1)\n      const isYesterday = date.getDate() === yesterday.getDate() &&\n          date.getMonth() === yesterday.getMonth() &&\n          date.getFullYear() === yesterday.getFullYear()\n\n      const weekDay = weekDays[date.getDay()]\n      const dateStr = `${date.getMonth() + 1}月${date.getDate()}日`\n\n      return {\n        date: `${dateStr} ${weekDay}`,\n        time: timeStr,\n        relative: isToday ? '今天' : isYesterday ? '昨天' : dateStr\n      }\n    },\n\n    showBackupOptions() {\n      const systemInfo = uni.getSystemInfoSync()\n      uni.showActionSheet({\n        itemList: ['导出数据', '导入数据'],\n        itemColor: systemInfo?.platform === 'ios' ? '#007AFF' : '#2d8cf0',\n        success: (res) => {\n          if (systemInfo?.platform === 'ios') {\n            setTimeout(() => {\n              this.handleBackupAction(res.tapIndex)\n            }, 100)\n          } else {\n            this.handleBackupAction(res.tapIndex)\n          }\n        }\n      })\n    },\n\n    handleBackupAction(tapIndex) {\n      if (tapIndex === 0) {\n        this.handleExport()\n      } else if (tapIndex === 1) {\n        this.handleImport()\n      }\n    },\n\n    async handleExport() {\n      uni.showModal({\n        title: '导出说明',\n        content: '由于微信小程序的限制，导出数据将通过分享功能实现。导出后您可以选择将文件保存到手机进行备份。',\n        confirmText: '继续导出',\n        cancelText: '取消',\n        success: (res) => {\n          if (res.confirm) {\n            this.performExport()\n          }\n        }\n      })\n    },\n\n    async performExport() {\n      try {\n        const habits = uni.getStorageSync('habits') || []\n        const exportData = {\n          version: '1.0',\n          exportTime: new Date().toISOString(),\n          data: habits\n        }\n\n        const jsonStr = JSON.stringify(exportData, null, 2)\n        const fileName = `habits_backup_${this.formatExportDate(new Date())}.json`\n\n        try {\n          const userPath = wx.env.USER_DATA_PATH\n          const filePath = `${userPath}/${fileName}`\n          const fs = wx.getFileSystemManager()\n          fs.writeFileSync(filePath, jsonStr, 'utf8')\n\n          wx.shareFileMessage({\n            filePath: filePath,\n            success: () => {\n              uni.showToast({\n                title: '数据已导出，请确保从你分享的对话中选择该数据文件保存到手机',\n                icon: 'none',\n                duration: 3000\n              })\n            },\n            fail: (err) => {\n              console.error('Share file error:', err)\n              uni.showToast({\n                title: '导出失败',\n                icon: 'none'\n              })\n            }\n          })\n        } catch (err) {\n          console.error('File operation error:', err)\n          uni.showToast({\n            title: '导出失败',\n            icon: 'none'\n          })\n        }\n      } catch (error) {\n        console.error('Export error:', error)\n        uni.showToast({\n          title: '导出失败',\n          icon: 'none'\n        })\n      }\n    },\n\n    formatExportDate(date) {\n      const year = date.getFullYear()\n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const day = String(date.getDate()).padStart(2, '0')\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      const seconds = String(date.getSeconds()).padStart(2, '0')\n      return `${year}${month}${day}_${hours}${minutes}${seconds}`\n    },\n\n    async performImport(importData) {\n      try {\n        uni.showActionSheet({\n          itemList: ['合并数据', '完全覆盖'],\n          success: (res) => {\n            if (res.tapIndex === 0) {\n              uni.showModal({\n                title: '确认合并',\n                content: '合并将保留现有数据，并添加新数据。确定继续吗？',\n                success: (modalRes) => {\n                  if (modalRes.confirm) {\n                    this.mergeImportData(importData.data)\n                  }\n                }\n              })\n            } else {\n              uni.showModal({\n                title: '确认覆盖',\n                content: '此操作将完全覆盖现有数据，确定继续吗？',\n                success: (modalRes) => {\n                  if (modalRes.confirm) {\n                    this.overwriteImportData(importData.data)\n                  }\n                }\n              })\n            }\n          }\n        })\n      } catch (error) {\n        console.error('Import error:', error)\n        uni.showToast({\n          title: '导入失败',\n          icon: 'none'\n        })\n      }\n    },\n\n    mergeImportData(importedHabits) {\n      try {\n        const currentHabits = uni.getStorageSync('habits') || []\n        const habitMap = new Map(currentHabits.map(habit => [habit.habit_id, habit]))\n\n        importedHabits.forEach(importedHabit => {\n          const existingHabit = habitMap.get(importedhabit.habit_id)\n          if (existingHabit) {\n            const completedSet = new Set([...existingHabit.completed, ...importedHabit.completed])\n            existingHabit.completed = Array.from(completedSet)\n\n            const notesMap = new Map()\n            existingHabit.notes.forEach(note => {\n              notesMap.set(note.timestamp, note)\n            })\n            importedHabit.notes.forEach(note => {\n              notesMap.set(note.timestamp, note)\n            })\n            existingHabit.notes = Array.from(notesMap.values())\n                .sort((a, b) => b.timestamp - a.timestamp)\n\n            existingHabit.title = importedHabit.title\n            existingHabit.icon = importedHabit.icon\n            existingHabit.color = importedHabit.color\n            existingHabit.flag = importedHabit.flag\n          } else {\n            habitMap.set(importedhabit.habit_id, importedHabit)\n          }\n        })\n\n        const mergedHabits = Array.from(habitMap.values())\n        uni.setStorageSync('habits', mergedHabits)\n        this.loadHabits()\n        uni.showToast({\n          title: '数据已合并',\n          icon: 'success'\n        })\n      } catch (error) {\n        console.error('Merge error:', error)\n        uni.showToast({\n          title: '合并失败',\n          icon: 'none'\n        })\n      }\n    },\n\n    overwriteImportData(importedHabits) {\n      try {\n        uni.setStorageSync('habits', importedHabits)\n        this.loadHabits()\n        uni.showToast({\n          title: '导入成功',\n          icon: 'success'\n        })\n      } catch (error) {\n        console.error('Overwrite error:', error)\n        uni.showToast({\n          title: '导入失败',\n          icon: 'none'\n        })\n      }\n    },\n\n    async handleImport() {\n      uni.showModal({\n        title: '导入说明',\n        content: '请确保：\\n1. 选择的是.json格式的备份文件\\n2. 文件是从本应用导出的有效文件\\n3. 聊天记录中存在该文件',\n        confirmText: '开始导入',\n        success: (res) => {\n          if (res.confirm) {\n            this.chooseAndReadFile()\n          }\n        }\n      })\n    },\n\n    chooseAndReadFile() {\n      wx.chooseMessageFile({\n        count: 1,\n        type: 'all', // 修改为 'all' 而不是 'file'\n        success: (res) => {\n          const tempFilePath = res.tempFiles[0].path\n          if (!tempFilePath.toLowerCase().endsWith('.json')) {\n            uni.showToast({\n              title: '请选择JSON格式文件',\n              icon: 'none',\n              duration: 2000\n            })\n            return\n          }\n\n          const fs = wx.getFileSystemManager()\n          fs.readFile({\n            filePath: tempFilePath,\n            encoding: 'utf8',\n            success: (readRes) => {\n              try {\n                const importData = JSON.parse(readRes.data)\n                if (!this.validateImportData(importData)) {\n                  uni.showToast({\n                    title: '导入文件格式错误',\n                    icon: 'none'\n                  })\n                  return\n                }\n                this.performImport(importData)\n              } catch (parseError) {\n                console.error('Parse error:', parseError)\n                uni.showToast({\n                  title: '文件格式错误',\n                  icon: 'none'\n                })\n              }\n            },\n            fail: (err) => {\n              console.error('Read file error:', err)\n              uni.showToast({\n                title: '读取文件失败',\n                icon: 'none'\n              })\n            }\n          })\n        },\n        fail: (err) => {\n          console.error('Choose file error:', err)\n          const systemInfo = uni.getSystemInfoSync()\n          const isIOS = systemInfo.platform === 'ios'\n          if (isIOS) {\n            uni.showModal({\n              title: '选择文件失败',\n              content: '请确保:\\n1. 选择正确的JSON文件\\n2. 如果看不到文件，请重新发送到聊天\\n3. 或先保存到\"文件\"应用再选择',\n              showCancel: false\n            })\n          } else {\n            uni.showToast({\n              title: '选择文件失败',\n              icon: 'none',\n              duration: 2000\n            })\n          }\n        }\n      })\n    }\n  },\n\n  // 首次加载时执行\n  async onLoad() {\n    // 先获取用户信息\n    this.loadUserInfo()\n    // 加载习惯数据\n    await this.loadHabits()\n    this.updateDateInfo()\n    this.startClock()\n\n    console.log('##habits:', this.habits)\n\n    // 计算完美打卡天数\n    if (this.habits.length > 0) {\n      const dateCountMap = new Map()\n      this.habits.forEach(habit => {\n        if (habit.completed) {\n          habit.completed.forEach(date => {\n            const dateStr = new Date(date).toISOString().split('T')[0]\n            const count = dateCountMap.get(dateStr) || 0\n            dateCountMap.set(dateStr, count + 1)\n          })\n        }\n      })\n\n      console.log('dateCountMap:', dateCountMap)\n\n      // Store perfect days as array of dates instead of count\n      const currentDay = new Date()\n      currentDay.setDate(currentDay.getDate() - 1)\n      \n      while(true) {\n        const dateStr = currentDay.toISOString().split('T')[0]\n        const completedCount = dateCountMap.get(dateStr) || 0\n        \n        if (completedCount === this.habits.length) {\n          this.perfectDays.push(dateStr)\n        } else {\n          break\n        }\n        currentDay.setDate(currentDay.getDate() - 1)\n      }\n      console.log('perfectDays:', this.perfectDays)    \n    }\n\n    // 加载AI消息\n    if (this.habits.length === 0) {\n      const initialMessage = this.default_message_list[0]\n      this.aiMessage = {\n        emoji: initialMessage.emoji,\n        content: initialMessage.content.replace('{nickname}', this.nickname)\n      }\n    } else {\n      try {\n        const res = await apiService.getLastMessage()\n        if (res.status ==='success' && res.data) {\n          this.aiMessage = {\n            emoji: res.data.emoji || this.default_message_list[0].emoji,\n            content: res.data.content || this.default_message_list[0].content\n          }\n        } else {\n          this.aiMessage = {\n            emoji: this.default_message_list[0].emoji,\n            content: this.default_message_list[0].content\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching last message:', error)\n        this.aiMessage = {\n          emoji: this.default_message_list[0].emoji,\n          content: this.default_message_list[0].content\n        }\n      }\n    }\n  },\n\n  // 每次页面显示时执行\n  async onShow() {\n    // 先获取用户信息\n    this.loadUserInfo()\n\n    // 加载习惯数据\n    this.loadHabits()\n    this.updateDateInfo()\n    this.startClock()\n    \n    // 加载AI消息\n    if (this.habits.length === 0) {\n      const initialMessage = this.default_message_list[0]\n      this.aiMessage = {\n        emoji: initialMessage.emoji,\n        content: initialMessage.content.replace('{nickname}', this.nickname)\n      }\n    }\n  },\n\n  onHide() {\n    this.stopClock()\n  },\n\n  onUnload() {\n    this.stopClock()\n  }\n})\n</script>\n\n<style>\n.container {\n  background-color: #fff;\n  color: #2c3e50;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  padding: 20rpx 40rpx;\n}\n\n.ai-message {\n  background: #fff;\n  left: 0;\n  padding: 20rpx 0;\n  display: flex;\n  right: 0;\n  width: 100%;\n  z-index: 100;\n  box-sizing: border-box;\n}\n\n.ai-message .ai-message-card {\n  background: #f5f7fa;\n  border-radius: 20rpx;\n  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, .05), 0 2rpx 8rpx rgba(0, 0, 0, .02);\n  padding: 30rpx;\n  display: flex;\n  align-items: center;\n  gap: 20rpx;\n  transition: all 0.3s ease;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.ai-message .ai-message-card:active {\n  opacity: 0.9;\n  transform: scale(0.95);\n  animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;\n}\n\n@keyframes shake {\n  10%, 90% {\n    transform: translate3d(-1px, 0, 0) scale(0.98);\n  }\n  \n  20%, 80% {\n    transform: translate3d(2px, 0, 0) scale(0.98);\n  }\n\n  30%, 50%, 70% {\n    transform: translate3d(-4px, 0, 0) scale(0.98);\n  }\n\n  40%, 60% {\n    transform: translate3d(4px, 0, 0) scale(0.98);\n  }\n}\n\n.ai-message .ai-message-card .ai-message-icon {\n  width: 80rpx;\n  height: 80rpx;\n  border-radius: 12rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 55rpx;\n  flex-shrink: 0;\n}\n\n.ai-message .ai-message-card .ai-message-content {\n  position: relative;\n  background: #fff;\n  border-radius: 12rpx;\n  padding: 20rpx 24rpx;\n  color: #2c3e50;\n  font-size: 28rpx;\n  line-height: 1.5;\n  max-width: 80%;\n}\n\n/* 添加气泡尖角 */\n.ai-message .ai-message-card .ai-message-content::before {\n  content: '';\n  position: absolute;\n  left: -16rpx;\n  top: 24rpx;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 16rpx 16rpx 16rpx 0;\n  border-color: transparent #fff transparent transparent;\n}\n\n.container, .header {\n  box-sizing: border-box;\n}\n\n.header {\n  position: relative; /* 改为相对定位 */\n  width: 100%;\n  z-index: 100;\n  padding: 20rpx 0;\n\n}\n\n.date-info {\n  align-items: center;\n  display: flex;\n  gap: 20rpx;\n  justify-content: space-between;\n}\n\n.date-info .date-content {\n  display: flex;\n  flex-direction: column;\n  gap: 10rpx;\n}\n\n.date-info .date-content .year {\n  color: #2c3e50;\n  font-size: 32rpx;\n  font-weight: 400;\n}\n\n.date-info .date-content .month-week {\n  color: #5c6b7a;\n  font-size: 24rpx;\n}\n\n.date-info .flip-clock {\n  align-items: center;\n  background: #f5f7fa;\n  border-radius: 16rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, .1);\n  display: flex;\n  height: 100%;\n  padding: 16rpx 24rpx;\n  gap: 12rpx;\n  justify-content: center; \n}\n\n.date-info .flip-clock .streak-icon {\n  font-size: 48rpx; \n  animation: flame 1.5s ease-in-out infinite;\n}\n\n.date-info .flip-clock .time-unit {\n  background: #edf0f5;\n  border-radius: 8rpx;\n  color: #2c3e50;\n  font-size: 48rpx; \n  font-weight: 600; \n  min-width: 64rpx;\n  padding: 8rpx 16rpx;\n  position: relative;\n  text-align: center;\n  transition: all .3s ease;\n}\n\n.date-info .flip-clock .streak-label {\n  color: #2c3e50;\n  font-size: 28rpx;\n  font-weight: 500;\n}\n\n@keyframes flame {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.habit-stats, .header-row {\n  display: flex;\n}\n\n.habit-stats {\n  gap: 40rpx;\n  width: 100%;\n  margin-top: 20rpx;\n  margin-bottom: 20rpx;\n}\n\n.header-row {\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 10rpx;\n}\n\n.habit-stats .progress-bar {\n  background: #edf0f5;\n  border-radius: 16rpx;\n  height: 12rpx;\n  width: 100%;\n  overflow: hidden;\n}\n\n.habit-stats .progress-bar .progress-fill {\n  background: var(--theme-color);\n  border-radius: 16rpx;\n  height: 100%;\n  transition: width 0.3s ease;\n  width: 0;\n}\n\n.progress-fill.perfect {\n  animation: perfect-pulse 2s infinite;\n}\n\n@keyframes perfect-pulse {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n.habits-list {\n  perspective: 1000px;\n}\n\n.habits-list .habit-card {\n  background: #f5f7fa;\n  border-radius: 20rpx;\n  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, .05), 0 2rpx 8rpx rgba(0, 0, 0, .02);\n  margin-bottom: 20rpx;\n  min-height: 250rpx;\n  position: relative;\n  transform-style: preserve-3d;\n  transition: transform .6s cubic-bezier(.4, 0, .2, 1);\n  transition: transform .6s cubic-bezier(.4, 0, .2, 1), -webkit-transform .6s cubic-bezier(.4, 0, .2, 1);\n}\n\n.habits-list .habit-card.is-flipped {\n  transform: rotateY(180deg);\n}\n\n.habits-list .habit-card:active:not(.is-flipped) {\n  opacity: .9;\n  transform: scale(.98);\n}\n\n.habits-list .habit-card .card-face {\n  backface-visibility: hidden;\n  background: #f5f7fa;\n  border-radius: 20rpx;\n  box-sizing: border-box;\n  padding: 30rpx;\n  position: relative;\n  width: 100%;\n}\n\n.habits-list .habit-card .card-face.card-front {\n  transform: rotateY(0deg);\n  z-index: 2;\n}\n\n.habits-list .habit-card .card-face.card-back {\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transform: rotateY(180deg);\n  z-index: 1;\n}\n\n.habits-list .habit-card .card-face.card-back .flag-banner {\n  align-items: center;\n  background: linear-gradient(180deg, #fff4e5, var(--theme-color));\n  border: 2rpx solid #e2e7ed;\n  border-radius: 16rpx;\n  box-shadow: 0 4rpx 12rpx rgba(255, 159, 10, .15);\n  box-sizing: border-box;\n  display: flex;\n  gap: 20rpx;\n  overflow: hidden;\n  padding: 30rpx;\n  position: relative;\n  width: 100%;\n}\n\n.habits-list .habit-card .card-face.card-back .flag-banner::before {\n  background: linear-gradient(180deg, transparent, rgba(255, 159, 10, .08));\n  content: \"\";\n  height: 2rpx;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.habits-list .habit-card .card-face.card-back .flag-banner .flag-icon {\n  align-items: center;\n  background: #edf0f5;\n  border-radius: 40rpx;\n  display: flex;\n  flex-shrink: 0;\n  font-size: 48rpx;\n  height: 80rpx;\n  justify-content: center;\n  width: 80rpx;\n}\n\n.habits-list .habit-card .card-face.card-back .flag-banner .flag-text {\n  color: #2c3e50;\n  flex: 1;\n  font-size: 32rpx;\n  font-weight: 500;\n  line-height: 1.5;\n  padding: 0 20rpx;\n}\n\n.habits-list .habit-card .card-face.card-back .create-time {\n  align-items: center;\n  bottom: 20rpx;\n  display: flex;\n  gap: 10rpx;\n  justify-content: center;\n  left: 0;\n  padding: 0 30rpx;\n  position: absolute;\n  right: 0;\n}\n\n.habits-list .habit-card .card-face.card-back .create-time .time-label {\n  color: #5c6b7a;\n  font-size: 24rpx;\n}\n\n.habits-list .habit-card .card-face.card-back .create-time .time-value {\n  color: #2c3e50;\n  font-size: 24rpx;\n}\n\n.habits-list .habit-card .habit-header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.habits-list .habit-card .habit-header .title-section {\n  align-items: center;\n  border-radius: 16rpx;\n  display: flex;\n  flex: 1;\n  padding: 10rpx;\n}\n\n.habits-list .habit-card .habit-header .title-section .habit-icon {\n  align-items: center;\n  background-color: var(--theme-color);\n  border-radius: 16rpx;\n  display: flex;\n  height: 70rpx;\n  justify-content: center;\n  overflow: hidden;\n  width: 70rpx;\n}\n\n.habits-list .habit-card .habit-header .title-section .habit-icon .emoji-icon {\n  align-items: center;\n  color: #fff;\n  display: flex;\n  font-size: 40rpx;\n  height: 100%;\n  justify-content: center;\n  width: 100%;\n}\n\n.habits-list .habit-card .habit-header .title-section .habit-title {\n  color: #2c3e50;\n  font-size: 28rpx;\n  margin-left: 20rpx;\n}\n\n.habits-list .habit-card .habit-header .more-actions {\n  align-items: center;\n  display: flex;\n  height: 60rpx;\n  justify-content: center;\n  padding: 10rpx;\n  width: 60rpx;\n}\n\n.habits-list .habit-card .habit-header .more-actions .more-icon {\n  color: #5c6b7a;\n  font-size: 32rpx;\n  font-weight: 700;\n}\n\n.habits-list .habit-card .habit-content {\n  position: relative;\n  z-index: 1;\n}\n\n.progress-view {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 30rpx;\n}\n\n.progress-view .week-day {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n}\n\n.progress-view .week-day .day-label {\n  color: #5c6b7a;\n  font-size: 22rpx;\n  margin-bottom: 10rpx;\n}\n\n.progress-view .week-day .day-box {\n  align-items: center;\n  background: #edf0f5;\n  border-radius: 16rpx;\n  color: #2c3e50;\n  display: flex;\n  font-size: 24rpx;\n  height: 70rpx;\n  justify-content: center;\n  position: relative;\n  transition: all .2s ease;\n  width: 70rpx;\n}\n\n.progress-view .week-day .day-box:active {\n  opacity: .9;\n  transform: scale(.95);\n}\n\n.progress-view .week-day .day-box.today {\n  border: 2rpx solid var(--theme-color) !important;\n}\n\n.progress-view .week-day .day-box.today::after {\n  background-color: var(--theme-color);\n  border-radius: 50%;\n  bottom: -20rpx;\n  content: \"\";\n  height: 8rpx;\n  left: 50%;\n  position: absolute;\n  transform: translateX(-50%);\n  width: 8rpx;\n  z-index: 1;\n}\n\n.progress-view .week-day .day-box.completed {\n  animation: complete-animation .5s cubic-bezier(.4, 0, .2, 1);\n  background: var(--theme-color) !important;\n  box-shadow: 0 0 15rpx rgba(255, 159, 10, .15);\n  color: #fff !important;\n}\n\n.progress-view .week-day .day-box.completed:not(:active) {\n  animation: none;\n}\n\n.progress-view .week-day .day-box.today.completed {\n  background: var(--theme-color) !important;\n  border-color: #fff !important;\n  color: #fff !important;\n}\n\n.progress-view .week-day .day-box.today.completed::after {\n  background-color: var(--theme-color);\n  border-radius: 50%;\n  bottom: -20rpx;\n  content: \"\";\n  height: 8rpx;\n  left: 50%;\n  position: absolute;\n  transform: translateX(-50%);\n  width: 8rpx;\n  z-index: 1;\n}\n\n.progress-view .week-day .day-box.future {\n  opacity: .5;\n}\n\n.add-button {\n  position: fixed;\n  bottom: 40rpx; /* 修改：增加底部距离 */\n  right: 40rpx; /* 修改：增加右侧距离 */\n  width: 100rpx;\n  height: 100rpx;\n  background: var(--theme-color);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4rpx 12rpx rgba(255, 159, 10, .15);\n  z-index: 999; /* 修改：增加 z-index 确保在最上层 */\n}\n\n.add-button .plus {\n  color: #fff;\n  font-size: 50rpx;\n  font-weight: 300;\n}\n\n.add-button:active {\n  opacity: .9;\n  transform: scale(.95);\n}\n\n.empty-state {\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin-top: -200rpx;\n  padding: 40rpx;\n}\n\n.empty-state .empty-icon {\n  font-size: 120rpx;\n  margin-bottom: 30rpx;\n}\n\n.empty-state .empty-title {\n  color: #2c3e50;\n  font-size: 32rpx;\n  margin-bottom: 16rpx;\n}\n\n.empty-state .empty-desc {\n  color: #5c6b7a;\n  font-size: 28rpx;\n  line-height: 1.5;\n  text-align: center;\n}\n\n@-webkit-keyframes complete-animation {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.2);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes complete-animation {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.2);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n.view-container {\n  height: calc(100vh - 220rpx);\n  overflow-y: auto;\n  position: relative;\n}\n\n.view-container .view-page {\n  width: 100%;\n  will-change: transform;\n}\n\n.view-container .view-page, .view-container .view-page.slide-left-enter-active, .view-container .view-page.slide-right-enter-active {\n  transition: transform .3s ease-out;\n  transition: transform .3s ease-out, -webkit-transform .3s ease-out;\n}\n\n.view-container .view-page.slide-left-enter-from {\n  transform: translateX(100%);\n}\n\n.view-container .view-page.slide-right-enter-from {\n  transform: translateX(-100%);\n}\n\n.view-container .view-page.slide-left-enter-to, .view-container .view-page.slide-right-enter-to {\n  transform: translateX(0);\n}\n\n@-webkit-keyframes blink {\n  0%, 100% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: .5;\n  }\n}\n\n@keyframes blink {\n  0%, 100% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: .5;\n  }\n}\n\n.complete-order-btn {\n  background: var(--theme-color);\n  border-radius: 30rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, .1);\n  color: #fff;\n  font-size: 28rpx;\n  padding: 10rpx 30rpx;\n}\n\n.complete-order-btn:active {\n  opacity: .9;\n  transform: scale(.95);\n}\n\n.habit-card {\n  position: relative;\n  transform-origin: center center;\n  transition: all .3s linear;\n}\n\n.habit-card.is-order-mode {\n  padding-right: 100rpx;\n  transform: translateX(-60rpx);\n}\n\n.habit-card.moving-up {\n  animation: moveUp .3s linear;\n}\n\n.habit-card.moving-down {\n  animation: moveDown .3s linear;\n}\n\n.habit-card.no-interaction, .habit-card.no-interaction .habit-content, .habit-card.no-interaction .more-actions {\n  pointer-events: none;\n}\n\n.habit-card.no-interaction .order-buttons {\n  pointer-events: auto;\n}\n\n.habit-card .order-buttons {\n  display: flex;\n  flex-direction: column;\n  gap: 20rpx;\n  position: absolute;\n  right: -70rpx;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 10;\n}\n\n.habit-card .order-buttons .order-btn {\n  align-items: center;\n  background: #f5f7fa;\n  border-radius: 30rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, .1);\n  display: flex;\n  height: 60rpx;\n  justify-content: center;\n  width: 60rpx;\n}\n\n.habit-card .order-buttons .order-btn.disabled {\n  opacity: .5;\n  pointer-events: none;\n}\n\n.habit-card .order-buttons .order-btn:active {\n  opacity: .9;\n  transform: scale(.9);\n}\n\n.habit-card .order-buttons .order-btn .order-icon {\n  color: #2c3e50;\n  font-size: 32rpx;\n  font-weight: 700;\n}\n\n.habit-card .order-buttons .order-btn.up {\n  background: var(--theme-color);\n}\n\n.habit-card .order-buttons .order-btn.up .order-icon {\n  color: #fff;\n}\n\n.habit-card .order-buttons .order-btn.down {\n  background: #edf0f5;\n}\n\n.month-habit-card.no-interaction {\n  pointer-events: none;\n}\n\n@-webkit-keyframes moveUp {\n  0% {\n    transform: translateX(-60rpx) translateY(0);\n  }\n\n  100% {\n    transform: translateX(-60rpx) translateY(-240rpx);\n  }\n}\n\n@keyframes moveUp {\n  0% {\n    transform: translateX(-60rpx) translateY(0);\n  }\n\n  100% {\n    transform: translateX(-60rpx) translateY(-240rpx);\n  }\n}\n\n@-webkit-keyframes moveDown {\n  0% {\n    transform: translateX(-60rpx) translateY(0);\n  }\n\n  100% {\n    transform: translateX(-60rpx) translateY(240rpx);\n  }\n}\n\n@keyframes moveDown {\n  0% {\n    transform: translateX(-60rpx) translateY(0);\n  }\n\n  100% {\n    transform: translateX(-60rpx) translateY(240rpx);\n  }\n}\n\n.expand-button {\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  gap: 10rpx;\n  justify-content: center;\n  padding: 20rpx 0 10rpx;\n}\n\n.expand-button .expand-icon, .expand-button .expand-text {\n  color: #5c6b7a;\n  font-size: 24rpx;\n}\n\n.expand-button .expand-icon {\n  transition: transform .3s ease;\n  transition: transform .3s ease, -webkit-transform .3s ease;\n}\n\n.expand-button:active {\n  opacity: .9;\n}\n\n.notes-container {\n  border-top: 2rpx solid #edf0f5;\n  margin-top: 20rpx;\n  padding-top: 20rpx;\n  position: relative;\n  z-index: 1;\n}\n\n.notes-container .empty-notes {\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  padding: 30rpx;\n  width: 100%;\n}\n\n.notes-container .empty-notes text {\n  color: rgba(44, 62, 80, .6);\n  font-size: 28rpx;\n  text-align: center;\n}\n\n.notes-container .notes-list {\n  box-sizing: border-box;\n  margin: 0 auto;\n  max-height: 400rpx;\n  overflow-y: auto;\n  width: 100%;\n}\n\n.notes-container .notes-list .note-item {\n  background: #edf0f5;\n  border-radius: 16rpx;\n  box-shadow: 0 4rpx 20rpx rgba(0, 0, 0, .05), 0 2rpx 8rpx rgba(0, 0, 0, .02);\n  box-sizing: border-box;\n  margin-bottom: 20rpx;\n  padding: 30rpx;\n  transition: all .2s ease;\n  width: 100%;\n}\n\n.notes-container .notes-list .note-item:active {\n  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, .03), 0 1rpx 4rpx rgba(0, 0, 0, .01);\n  transform: scale(.98);\n}\n\n.notes-container .notes-list .note-item .note-time {\n  align-items: center;\n  color: #8c9baa;\n  display: flex;\n  font-size: 24rpx;\n  justify-content: space-between;\n  margin-bottom: 16rpx;\n  padding-bottom: 12rpx;\n}\n\n.notes-container .notes-list .note-item .note-time .time-left {\n  align-items: center;\n  display: flex;\n  gap: 8rpx;\n}\n\n.notes-container .notes-list .note-item .note-time .time-left .date {\n  color: #5c6b7a;\n}\n\n.notes-container .notes-list .note-item .note-time .time-left .time {\n  color: #8c9baa;\n}\n\n.notes-container .notes-list .note-item .note-time .time-right {\n  color: #8c9baa;\n  font-size: 22rpx;\n  opacity: .8;\n}\n\n.notes-container .notes-list .note-item .note-content {\n  color: #2c3e50;\n  font-size: 28rpx;\n  line-height: 1.6;\n  padding-top: 4rpx;\n}\n\n.backup-actions .backup-btn {\n  align-items: center;\n  background: transparent;\n  border: none;\n  display: flex;\n  justify-content: center;\n  margin: 0;\n  padding: 10rpx;\n}\n\n.backup-actions .backup-btn::after {\n  border: none;\n}\n\n.backup-actions .backup-btn .icon {\n  font-size: 40rpx;\n}\n\n.backup-actions .backup-btn:active {\n  opacity: .7;\n}\n</style>","import MiniProgramPage from '/Users/linsir/Experiments/uni-app/habit-ai-uniapp/habit-ai-uniapp/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["defineComponent","uni","apiService","_a","res","wx"],"mappings":"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"}