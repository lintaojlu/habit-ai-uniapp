{"version":3,"file":"api.js","sources":["utils/api.js"],"sourcesContent":["// utils/api.js\nconst baseURL = 'http://123.56.229.52:8000';\n\n// Export the request function\nexport function request(options) {\n    return new Promise((resolve, reject) => {\n        // 获取 token\n        const token = uni.getStorageSync('token');\n        \n        uni.request({\n            url: baseURL + options.url,\n            method: options.method || 'GET',\n            data: options.data || {},\n            header: {\n                'Content-Type': 'application/json',\n                'Authorization': token ? `Bearer ${token}` : '',\n                ...options.header\n            },\n            success: (res) => {\n                if (res.statusCode === 401) {\n                    // token 失效，跳转登录页\n                    uni.redirectTo({\n                        url: '/pages/login/login'\n                    });\n                    reject(new Error('登录失败，请重新登录'));\n                    return;\n                }\n                \n                if (res.statusCode >= 200 && res.statusCode < 300) {\n                    resolve(res.data);\n                } else {\n                    console.error('API request failed:', res);\n                    reject(res.data || { message: '请求失败' });\n                }\n            },\n            fail: (err) => {\n                reject(err || { message: '网络错误' });\n            }\n        });\n    });\n}\n// Mock API 服务，确保所有请求都返回成功\nexport const apiService = {\n    register(userData) {\n        return Promise.resolve({\n            status: \"success\",\n            user_id: \"mock_user_id\",\n            token: \"mock_token\"\n        });\n    },\n    \n    login(loginData) {\n        return Promise.resolve({\n            status: \"success\",\n            user_id: \"mock_user_id\",\n            token: \"mock_token\"\n        });\n    },\n    \n    getUserInfo() {\n        return Promise.resolve({\n            status: \"success\",\n            data: {\n                user_id: \"mock_user_id\",\n                nickname: \"Mock User\",\n                avatar_url: \"https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0\",\n                wechat_openid: \"mock_openid\",\n                ai_character_name: \"毒舌\",\n                telephone: \"1234567890\",\n                created_at: \"2023-09-01T00:00:00Z\",\n                updated_at: \"2023-09-02T00:00:00Z\",\n                registration_code: \"mock_code\"\n            }\n        });\n    },\n    \n    updateUserInfo(userData) {\n        return Promise.resolve({\n            status: \"success\",\n            message: \"用户数据已更新\"\n        });\n    },\n    \n    createHabit(habitData) {\n        return Promise.resolve({\n            status: \"success\",\n            habit_id: \"mock_habit_id\"\n        });\n    },\n    \n    getHabitInfo(habitId) {\n        return Promise.resolve({\n            status: \"success\",\n            data: {\n                habit_id: habitId,\n                title: \"Mock Habit\",\n                icon: \"🏃\",\n                description: \"Mock Description\",\n                alert_time: { days: [1, 3, 5], time: [\"07:00\"] },\n                deadline: \"2025-12-31T00:00:00Z\",\n                completed: [\"2025-02-18T07:00:00Z\"],\n                streak: { current: 1, longest: 5, longest_start: \"2025-02-13T00:00:00Z\", longest_end: \"2025-02-17T00:00:00Z\" },\n                is_archived: false,\n                order: 0\n            }\n        });\n    },\n    \n    // TODO 修改了input和output，注意\n    updateHabit(habit_id, habitData) {\n        return Promise.resolve({\n            status: \"success\",\n            message: \"习惯已更新\"\n        });\n    },\n    \n    deleteHabit(habitId) {\n        return Promise.resolve({\n            status: \"success\",\n            message: \"习惯已删除\"\n        });\n    },\n    \n    recordHabit(habitId) {\n        return Promise.resolve({\n            status: \"success\",\n            data: {\n                habit_id: habitId,\n                completed: [\"2025-02-18T07:00:00Z\", \"2025-02-20T07:00:00Z\", \"2025-02-21T07:00:00Z\"],\n                streak: { current: 3, longest: 3, longest_start: \"2025-02-18T00:00:00Z\", longest_end: \"2025-02-20T00:00:00Z\" }\n            }\n        });\n    },\n    \n    getHabitStreak(habitId) {\n        return Promise.resolve({\n            status: \"success\",\n            data: {\n                habit_id: habitId,\n                streak: { current: 2, longest: 5, longest_start: \"2025-02-13T00:00:00Z\", longest_end: \"2025-02-17T00:00:00Z\" }\n            }\n        });\n    },\n    \n    getHabitList() {\n        return Promise.resolve({\n            status: \"success\",\n            data: [\n                {\n                    habit_id: \"mock_habit_id_1\",\n                    title: \"Mock Habit 1\",\n                    icon: \"🏃\",\n                    description: \"Mock Description 1\",\n                    alert_time: { days: [1, 3, 5], time: [\"07:00\"] },\n                    deadline: \"2025-12-31T00:00:00Z\",\n                    completed: [\"2025-02-18T07:00:00Z\"],\n                    streak: { current: 1, longest: 5, longest_start: \"2025-02-13T00:00:00Z\", longest_end: \"2025-02-17T00:00:00Z\" },\n                    is_archived: false,\n                    order: 0\n                },\n                {\n                    habit_id: \"mock_habit_id_2\",\n                    title: \"Mock Habit 2\",\n                    icon: \"🍔\",\n                    description: \"Mock Description 2\",\n                    alert_time: { days: [2, 4], time: [\"12:00\"] },\n                    deadline: \"2025-12-31T00:00:00Z\",\n                    completed: [\"2025-02-18T12:00:00Z\"],\n                    streak: { current: 2, longest: 5, longest_start: \"2025-02-13T00:00:00Z\", longest_end: \"2025-02-17T00:00:00Z\" },\n                    is_archived: false,\n                    order: 1\n                }\n            ]\n        });\n    },\n\n    getAICharacterList() {\n        return Promise.resolve({\n            status: \"success\",\n            data: [\n                {\n                    character_id: \"mock_character_id_1\",\n                    name: \"Mock Character 1\",\n                    description: \"Mock Description 1\",\n                    icon: \"🐶\"\n                },\n                {\n                    character_id: \"mock_character_id_2\",\n                    name: \"Mock Character 2\",\n                    description: \"Mock Description 2\",\n                    icon: \"🐱\"\n                }\n            ]\n        });\n    },\n    \n    getMemoryList(params = {}) {\n        return Promise.resolve({\n            status: \"success\",\n            data: []\n        });\n    },\n    \n    getAISuggestion() {\n        return Promise.resolve({\n            status: \"success\",\n            data: {\n                emoji: \"😥\",\n                suggestion: \"你再不打卡我花都谢了\"\n            }\n        });\n    },\n    \n    sendConversation(content, sessionId = '') {\n        return Promise.resolve({\n            status: \"success\",\n            data: {\n                session_id: sessionId || \"mock_session_id\",\n                reply: \"这是一个测试回复，模拟 AI 的建议。\"\n            }\n        });\n    },\n\n    feedback(params) {\n        return Promise.resolve({\n            status: \"success\",\n            message: \"反馈已提交\"\n        });\n    }\n};\n\n// 移除示例接口\nexport const getData = (params) => {\n    return request({ url: '/data', method: 'GET', data: params });\n};\n\nexport const postData = (data) => {\n    return request({ url: '/data', method: 'POST', data });\n};"],"names":[],"mappings":"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"}